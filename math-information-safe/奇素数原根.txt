#include<iostream>
#include<vector>
using namespace std;
vector<int>prime;  //与p互素的数 
vector<int>factor;  // p素因子 
vector<int>residue; //简化剩余系 
long long fmode(long long a, long long b, long long m) {
	long long sum = 1;
	a = a % m;
	while (b > 0) {
		if (b % 2 == 1) sum = (sum * a) % m;
		b /= 2;
		a = (a * a) % m;
	}
	return sum;
}

int gcd(int a, int b) {
	int r;
	r = a % b;
	while (r != 0) {
		a = b;
		b = r;
		r = a % b;
	}
	return b;
}

int main() {
	int p;
	cout << "请输入一个奇素数p：";
	cin >> p;
	p--; //素数的欧拉函数即p-1 

	for (int i = 2; i < p; i++) {
		int k = 0;
		for (int j = 2; j < i; j++) {
			if (i % j != 0) 	k++; //判断是否为素数		
		}
		if (k == i - 2) prime.push_back(i);
	}

	int t = 0, f = -1, b = p;
	while (t < prime.size()) {
		if (b % prime[t] == 0) {
			b = b / prime[t];
			if (t != f) {   //防止重复 
				factor.push_back(p / prime[t]);
				f = t;
			}
		}
		else t++;
	}

	int yroot;   //最小原根 
	for (int i = 2; i < p; i++) {
		int w = 0;
		for (int j = 0; j < factor.size(); j++) {
			if (fmode(i, factor[j], p + 1) != 1) {//快速幂运算 
				w++;
			}
		}
		if (w == factor.size()) { //模p恒不为1,输出原根 
			yroot = i;
			break;
		}
	}
	cout << "模" << p + 1 << "的最小原根为：" << yroot << endl;

	for (int i = 1; i < p; i++) {
		if (gcd(i, p) == 1)
			residue.push_back(i);
	}
	cout << "模" << p + 1 << "的所有原根为：";
	for (int i = 0; i < residue.size(); i++) {
		cout << fmode(yroot, residue[i], p + 1) << " ";

	}

	return 0;
}

