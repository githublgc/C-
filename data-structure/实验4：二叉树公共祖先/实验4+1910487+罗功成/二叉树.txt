vector<vector<int> > allPath;
//找到所有路径
void findAllPath(BinaryTreeNode*pRoot, vector<int>&path){
	if (pRoot == NULL)
	{
		return;
	}
	path.push_back(pRoot->m_nValue);
	if (pRoot->m_pLeft == NULL&&pRoot->m_pRight == NULL) //达到了叶子节点
	{
		printPath(path);//打印路径
		allPath.push_back(path);//保存路径
	}
	if (pRoot->m_pLeft!=NULL)//左子树
	{
		findAllPath(pRoot->m_pLeft, path);
	}
	if (pRoot->m_pRight!=NULL)//右子树
	{
		findAllPath(pRoot->m_pRight, path);
	}
	path.pop_back();//在返回到父节点之前，在路径上删除当前节点
}

//先序创建二叉树  
void CreatBTree(BinaryTreeNode *&root)
{
	int nValue = 0;
	cin >> nValue;
	if (-1 == nValue)//-1代表为空
	{
		return;
	}
	else
	{
		root = new BinaryTreeNode();
		root->m_nValue = nValue;
		CreatBTree(root->m_pLeft);
		CreatBTree(root->m_pRight);
	}
}

//打印所有路径
void printAllPath(vector<vector<int> >&path){
	for (int i = 0; i < path.size();i++)
	{
		printPath(path[i]);
	}
}

int main(){
	BinaryTreeNode*T=NULL;
	cout << "先序构建二叉树:" << endl;
	CreatBTree(T);
	cout << endl;
	cout << "找到所有根节点到叶子节点的路径：" << endl;
	vector<int> path;
	findAllPath(T,path);
	cout << "打印得到的所有路径：" << endl;
	printAllPath(allPath);
	path.clear();
	int nNode;
	while (true)
	{
		cout << "输入要找的子节点:" << endl;
		cin >> nNode;
		cout << "根节点到子节点"<<nNode<<"的路径：" << endl;
		findPath(T, path, nNode);
		cout << endl;
		path.clear();//清零
	}	
	return 0;
}
//最大路径和
class Solution {
public:
    int result = INT_MIN;

    int maxPathSum(TreeNode* root) {
        helper(root);
        return result;
    }

    int helper(TreeNode* root)
    {
        if (root == NULL)
            return 0;

        int left = max(helper(root->left), 0);
        int right = max(helper(root->right), 0);

        // 求的过程中考虑包含当前根节点的最大路径
        result = max(result, root->val + left + right);
        // 只返回包含当前根节点和左子树或者右子树的路径，返回上一层和result比较
        return root->val + max(left, right);
    }
};

//最近公共祖先

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == NULL || p == root || q == root)
            return root;
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if (left != NULL && right != NULL)
            return root;
        return left != NULL ? left : right;
    }
};