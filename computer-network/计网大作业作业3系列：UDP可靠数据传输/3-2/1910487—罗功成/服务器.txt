#include"define.h"

#define BUFFER sizeof(packet)  //缓冲区大小

#define WINDOWSIZE 20 //滑动窗口大小

SOCKET sockServer;//服务器套接字
SOCKET sockClient;//客户端套接字

char buffer[WINDOWSIZE][BUFFER];//选择重传缓冲区
char filepath[20];//文件路径
auto ack = vector<int>(WINDOWSIZE);
int totalpacket;//数据包个数
int totalack = 0;//正确确认的数据包个数
int curseq = 0;
int curack = 0;
int sendwindow = WINDOWSIZE * BUFFER;//发送窗口
int recvSize;
int length = sizeof(SOCKADDR);
int STATE = 0;


//初始化工作
void inithandler()
{
	WORD wVersionRequested;
	WSADATA wsaData;
	
	int err;
	
	wVersionRequested = MAKEWORD(2, 2);
	//加载 dll 文件 Scoket 库   
	err = WSAStartup(wVersionRequested, &wsaData);
	if (err != 0) {
		//找不到 winsock.dll 
		cout << "WSAStartup failed with error: " << err << endl;
		return;
	}
	if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2)
	{
		cout << "Could not find a usable version of Winsock.dll" << endl;
		WSACleanup();
	}
	sockServer = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

	//设置套接字为非阻塞模式 
	int iMode = 1; //1：非阻塞，0：阻塞 
	ioctlsocket(sockServer, FIONBIO, (u_long FAR*) & iMode);//非阻塞设置 

	addrServer.sin_addr.S_un.S_addr = htonl(INADDR_ANY);
	addrServer.sin_family = AF_INET;
	addrServer.sin_port = htons(SERVER_PORT);
	
	for (int i = 0; i < WINDOWSIZE; i++)
	{
		ack[i] = 1;//初始都标记为1
	}
}

//超时重传
void timeout()
{
	BOOL flag = false;
	packet* pkt1 = new packet;
	pkt1->init_packet();
	if (ack[curack % WINDOWSIZE] == 2)
	{
		for (int i = curack; i != curseq; i = (i++) % seqnumber)
		{
			memcpy(pkt1, &buffer[i % WINDOWSIZE], BUFFER);
			sendto(sockServer, (char*)pkt1, BUFFER, 0, (SOCKADDR*)&addrClient, sizeof(SOCKADDR));
			cout << "重传第 " << i << " 号数据包" << endl;
			flag = true;
		}
	}
	
}


int main() {
	
	inithandler();
	
	cout << "请输入要发送的文件名：";
	cin >> filepath;
	ifstream is(filepath, ifstream::in | ios::binary);
	
	if (!is.is_open())
	{
		cout << "文件无法打开!" << endl;
		exit(1);
	}
	is.seekg(0, std::ios_base::end);
	
	double length1 = is.tellg();
	totalpacket = (length1 / 1024) + 1;
	cout << "文件大小为" << length1 << "Bytes,总共有" << totalpacket << "个数据包" << endl;
	is.seekg(0, std::ios_base::beg);
	
	packet* pkt = new packet;
	
	while (true)
	{
		recvSize = recvfrom(sockServer, (char*)pkt, BUFFER, 0, ((SOCKADDR*)&addrClient), &length);
		int count = 0;
		int waitcount = 0;
		if (pkt->tag == 0)
		{
			clock_t st = clock();//开始计时
			cout << "开始建立连接..." << endl;
			int stage = 0;
			bool runFlag = true;
			int waitCount = 0;
			while (runFlag)
			{
				switch (stage)
				{
				case 0://发送100阶段
					pkt = connecthandler(100, totalpacket);
					sendto(sockServer, (char*)pkt, BUFFER, 0, (SOCKADDR*)&addrClient, sizeof(SOCKADDR));
					
					Sleep(100);
					stage = 1;
					break;
				case 1://等待接收200阶段
					ZeroMemory(pkt, sizeof(*pkt));
					recvSize = recvfrom(sockServer, (char*)pkt, BUFFER, 0, ((SOCKADDR*)&addrClient), &length);
					
						if (pkt->tag == 200)
						{
							pkt->init_packet();
							cout << "开始文件传输..." << endl;
							memcpy(pkt->data, filepath, strlen(filepath));
							pkt->len = strlen(filepath);
							sendto(sockServer, (char*)pkt, BUFFER, 0, (SOCKADDR*)&addrClient, sizeof(SOCKADDR));
							stage = 2;
						}
					}     break;
					 
				case 2:
					if (totalack == totalpacket)//数据包传输完毕 
					{
						pkt->init_packet();
						pkt->tag = 88;
						
						cout << "数据传输成功！" << endl;
						cout << "传输用时: " << (clock() - st) * 1000.0 / CLOCKS_PER_SEC << "ms" << endl;
						cout << "平均吞吐率" << (80000.0 * length1 / ((clock() - st)))<< "bps" << endl;
						sendto(sockServer, (char*)pkt, sizeof(*pkt), 0, (SOCKADDR*)&addrClient, sizeof(SOCKADDR));
						runFlag = false;
						exit(0);
						break;
					}
					while ((curseq + seqnumber - curack) % seqnumber < minwindow(cwnd, WINDOWSIZE) && sendwindow>0)//只要窗口还没被用完，就持续发送数据包
					{
						ZeroMemory(buffer[curseq % WINDOWSIZE], BUFFER);
						pkt->init_packet();
						if (length1 >= 1024)//进行分包传输
						{
							is.read(pkt->data, 1024);
							make_pkt(pkt, curseq, 1024);
							length1 -= 1024;
						}
						else
						{
							is.read(pkt->data, length1);
							make_pkt(pkt, curseq, length1);
						}
						memcpy(buffer[curseq % WINDOWSIZE], pkt, BUFFER);
						sendto(sockServer, (char*)pkt, BUFFER, 0, (SOCKADDR*)&addrClient, sizeof(SOCKADDR));
						cout << "发送了seq为 " << curseq << " 的数据包" << endl << endl;
						ack[curseq % WINDOWSIZE] = 2;      ++curseq;      curseq %= seqnumber;
					}
					
					pkt->init_packet();
					recvSize = recvfrom(sockServer, (char*)pkt, BUFFER, 0, ((SOCKADDR*)&addrClient), &length);
					
					
						ackhandler(pkt->ack);
						sendwindow = pkt->window;
					
					break;
				}
			}
		}
	}
	closesocket(sockServer);
	WSACleanup();
	return 0;
}